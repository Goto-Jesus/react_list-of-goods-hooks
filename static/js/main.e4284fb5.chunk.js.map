{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","isReversed","setIsReversed","NONE","sortType","setSortType","visibleGoods","goods","sort","currentGood","nextGood","ALPHABET","localeCompare","LENGTH","length","reverse","getReorderedGoods","className","type","classnames","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAqCE,IAAME,EAAgB,WAC3B,MAAoCC,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAgCF,mBAAmBH,EAASM,MAA5D,mBAAOC,EAAP,KAAiBC,EAAjB,KAUMC,EAtCR,SACEC,EADF,GAGG,IADCH,EACF,EADEA,SAAUH,EACZ,EADYA,WAENK,EAAY,YAAOC,GAmBzB,OAjBAD,EAAaE,MAAK,SAACC,EAAaC,GAC9B,OAAQN,GACN,KAAKP,EAASc,SACZ,OAAOF,EAAYG,cAAcF,GAEnC,KAAKb,EAASgB,OACZ,OAAOJ,EAAYK,OAASJ,EAASI,OAEvC,QACE,OAAO,MAITb,GACFK,EAAaS,UAGRT,EAecU,CACnBlB,EACA,CAAEM,WAAUH,eAGd,OACE,sBAAKgB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAW,iBAAkB,CACtC,WAAYf,IAAaP,EAASc,WAEpCS,QArBqB,kBAAMf,EAAYR,EAASc,WAgBlD,iCAUA,wBACEO,KAAK,SACLD,UAAWE,IAAW,oBAAqB,CACzC,WAAYf,IAAaP,EAASgB,SAEpCO,QA9BmB,kBAAMf,EAAYR,EAASgB,SAyBhD,4BAUA,wBACEK,KAAK,SACLD,UAAWE,IAAW,oBAAqB,CACzC,YAAalB,IAEfmB,QAvCe,kBAAMlB,GAAeD,IAkCtC,sBAUEG,IAAaP,EAASM,MAAQF,IAC9B,wBACEiB,KAAK,SACLD,UAAU,4BACVG,QA/CU,WAClBf,EAAYR,EAASM,MACrBD,GAAc,IA0CR,sBAUJ,6BACE,6BACGI,EAAae,KAAI,SAAAC,GAAI,OACpB,oBAAI,UAAQ,OAAZ,SAAoBA,eCpHhCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.e4284fb5.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport classnames from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\ninterface ReorderOptions {\n  sortType: SortType,\n  isReversed: boolean,\n}\n\nfunction getReorderedGoods(\n  goods: string[],\n  { sortType, isReversed }: ReorderOptions,\n) {\n  const visibleGoods = [...goods];\n\n  visibleGoods.sort((currentGood, nextGood) => {\n    switch (sortType) {\n      case SortType.ALPHABET:\n        return currentGood.localeCompare(nextGood);\n\n      case SortType.LENGTH:\n        return currentGood.length - nextGood.length;\n\n      default:\n        return 0;\n    }\n  });\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n}\n\nexport const App: React.FC = () => {\n  const [isReversed, setIsReversed] = useState(false);\n  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n\n  const handleSortByAlphabet = () => setSortType(SortType.ALPHABET);\n  const handleSortByLength = () => setSortType(SortType.LENGTH);\n  const handleReversed = () => setIsReversed(!isReversed);\n  const handleReset = () => {\n    setSortType(SortType.NONE);\n    setIsReversed(false);\n  };\n\n  const visibleGoods = getReorderedGoods(\n    goodsFromServer,\n    { sortType, isReversed },\n  );\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classnames('button is-info', {\n            'is-light': sortType !== SortType.ALPHABET,\n          })}\n          onClick={handleSortByAlphabet}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classnames('button is-success', {\n            'is-light': sortType !== SortType.LENGTH,\n          })}\n          onClick={handleSortByLength}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={classnames('button is-warning', {\n            'is-light': !isReversed,\n          })}\n          onClick={handleReversed}\n        >\n          Reverse\n        </button>\n\n        {(sortType !== SortType.NONE || isReversed) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={handleReset}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        <ul>\n          {visibleGoods.map(good => (\n            <li data-cy=\"Good\">{good}</li>\n          ))}\n        </ul>\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}